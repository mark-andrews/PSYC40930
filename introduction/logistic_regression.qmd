---
title: "Introducing Machine Learning and Binary Classifiers"
jupyter: python3
execute:
    error: true
format:
  html:
    toc: true
    toc-location: right
    embed-resources: true
---

```{python}
# pip install scikit-learn
import sklearn
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import preprocessing
from sklearn.metrics import (confusion_matrix,
                             precision_score,
                             recall_score,
                             f1_score,
                             classification_report,
                             precision_recall_curve,
                             roc_curve,
                             roc_auc_score)

# pip install matplotlib 
from matplotlib import pyplot as plt
```

```{python}
mnist = datasets.fetch_openml('mnist_784', version = 1)
```

```{python}
type(mnist)
```

```{python}
mnist.keys()
```

```{python}
mnist_data = mnist['data'].values
```

```{python}
mnist_data.shape
```

```{python}
28 * 28
```

```{python}
mnist_data[12345].reshape(28, 28)
```

```{python}
plt.imshow(mnist_data[12345].reshape(28, 28), cmap = plt.cm.binary, interpolation = 'nearest');
```

```{python}
plt.imshow(mnist_data[57].reshape(28, 28), cmap = plt.cm.binary, interpolation = 'nearest');
```

```{python}
mnist_data[57]
```

```{python}
fig = plt.figure(figsize = (15, 15))

for i in range(100):
    fig.add_subplot(10, 10, i + 1, xticks = [], yticks = [])
    plt.imshow(mnist_data[i].reshape(28, 28), cmap = plt.cm.binary, interpolation = 'nearest');
```

```{python}
mnist.keys()
```

```{python}
mnist['target']
```

```{python}
type(mnist['target'])
```

```{python}
mnist_target = mnist['target'].values
```

```{python}
mnist_target
```

```{python}
X_train, X_test, y_train, y_test = train_test_split(mnist_data, 
                                                    mnist_target,
                                                    test_size=0.2,
                                                    random_state=101)
```

```{python}
X_train.shape
```

```{python}
X_test.shape
```

```{python}
y_train.shape
```

```{python}
y_test.shape
```

```{python}
y_train
```

```{python}
y_train = y_train == '8'
```

```{python}
y_train
```

```{python}
y_test = y_test == '8'
```

```{python}
y_train.mean(), y_test.mean()
```

```{python}
y_train
```

```{python}
logreg = LogisticRegression(max_iter = 10000)
```

```{python}
X_train = preprocessing.scale(X_train)
```

```{python}
X_test = preprocessing.scale(X_test)
```

```{python}
X_train
```

```{python}
fig = plt.figure(figsize = (15, 15))

for i in range(100):
    fig.add_subplot(10, 10, i + 1, xticks = [], yticks = [])
    plt.imshow(X_train[i].reshape(28, 28), cmap = plt.cm.binary, interpolation = 'nearest');
```
```{python}
X_train.var()
```

```{python}
result = logreg.fit(X_train, y_train)
```

```{python}
result.predict(X_train)
```

```{python}
result.predict_proba(X_train)
```

```{python}
prob = result.predict_proba(X_train)[:,1]
```

```{python}
fig = plt.figure(figsize = (15, 15))

for i in range(100):
    fig.add_subplot(10, 10, i + 1, xticks = [], yticks = [])
    plt.imshow(X_train[i].reshape(28, 28), cmap = plt.cm.binary, interpolation = 'nearest');
    plt.title(prob[i].round(3))
```

```{python}
logreg.predict(X_train)
```

```{python}
logreg.predict_proba(X_train)[:,1] > 0.5
```

```{python}
(logreg.predict(X_train) == (logreg.predict_proba(X_train)[:,1] > 0.5)).mean()
```

```{python}
y_test
```

```{python}
y_test_classification = logreg.predict(X_test)
```

```{python}
confusion_matrix(y_test, y_test_classification)
```

