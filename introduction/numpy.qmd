---
title: "Introduction to NumPy"
jupyter: python3
execute:
    error: true
format:
  html:
    toc: true
    toc-location: right
    embed-resources: true
---


NumPy provides the `ndarray`: a typed, contiguous n-dimensional array with fast vectorized operations.

```{python}
import numpy as np
```

## Creating arrays and dtypes

```{python}
# from Python lists
a = np.array([1, 2, 3])
a, a.dtype, a.shape
```

```{python}
# 2D array
b = np.array([[1, 2, 3],
              [4, 5, 6]], dtype=np.int64)
b, b.dtype, b.ndim, b.shape
```

```{python}
# constructors
z = np.zeros((2, 3))
o = np.ones((2, 3))
r = np.arange(0, 10, 2)      # 0..8 step 2
l = np.linspace(0.0, 1.0, 5) # 5 points inclusive
z, o, r, l
```

## Shape, reshape, and views

```{python}
m = np.arange(12)            # 0..11
M = m.reshape(3, 4)          # 3Ã—4 view of the same data
m.shape, M.shape, M
```

## Vectorization and ufuncs

Elementwise ops apply to all entries without loops.

```{python}
x = np.array([0.0, 1.0, 2.0, 3.0])
y = np.array([10.0, 10.0, 10.0, 10.0])
x + y, x * y, np.sin(x)
```

## Indexing, slicing, boolean masks

```{python}
A = np.arange(1, 13).reshape(3, 4)
A[0, 0], A[1, 2], A[:, 1], A[1:, :2]
```

```{python}
# boolean mask
mask = A % 2 == 0
A[mask], mask
```

## Aggregations and axis logic

```{python}
X = np.arange(12).reshape(3, 4)
X.sum(), X.sum(axis=0), X.sum(axis=1)
```

## Matrix multiplication

```{python}
# matrix multiply: @
M = np.array([[1., 2., 3.],
              [4., 5., 6.]])
v = np.array([1., 0., -1.])
M @ v
```

